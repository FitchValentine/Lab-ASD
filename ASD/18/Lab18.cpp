#include <iostream>
#include <vector>
#include <algorithm>
//Этот алгоритм предназначен для приближенного решения задачи о подмножестве суммы, используя жадный подход, выбирая элементы в порядке убывания их значений.

bool subset(std::vector<int>& s, int t ) // Жадный алгоритм - приближенное решение. t-  ожидаемая сумма подмножества
{
	std::vector<int> S = {}; // Искомое подмножество можно выводить его, впринципе
	std::sort(s.rbegin(), s.rend()); // СОритруем от большего к меньшему

	for (int i = 0; i < s.size(); i++)
	{
		if (t >= s[i])
		{
			S.push_back(s[i]); // Заполняем подмножества пока можем
			t -= s[i];

		}
	}

	return  t == 0 ? true : false;
	/*Сначала массив s сортируется в невозрастающем порядке (от большего к меньшему).

Инициализируется пустой вектор S для хранения искомого подмножества.

Проходим по элементам от большего к меньшему.

Если текущий элемент меньше или равен ожидаемой сумме (t >= s[i]), то добавляем его в подмножество S и уменьшаем ожидаемую сумму.
Продолжаем этот процесс для остальных элементов.
Возвращаем true, если ожидаемая сумма t была точно достигнута (т.е., t == 0), и false в противном случае.*/
}

void main()
/*Создается вектор s, представляющий элементы.

Устанавливается ожидаемая сумма t.

Вызывается функция subset с параметрами s и t.

Результат - true если удалось найти подмножество, сумма элементов которого равна ожидаемой сумме, и false в противном случае. Результат выводится на экран. */
{
	std::vector<int> s = { 20,1,12,2,15};

	std::cout << subset(s, 6) << std::endl;
}