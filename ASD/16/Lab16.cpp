#include <vector> 
#include <iostream>

int backpack(std::vector<std::pair<int,int>>& stuff, int W) // Решение задачи, деля ее на маленькие подзадачи, формально, создается дискретная таблица знаечний
{                                                           // (двумерный массив dp) где снизу справа самый лучший исход
    int  n = stuff.size();
    std::vector<std::vector<int>> dp(W + 1, std::vector<int>(n + 1, 0)); //Создается двумерный массив dp размером (W + 1) x (n + 1), где n - количество предметов.

    for (int j = 1; j <= n; j++) //Итерируемся по предметам (j от 1 до n), а затем по возможным весам (w от 1 до W).
    {
        for (int w = 1; w <= W; w++) /*Для каждого веса и каждого предмета :
            Если вес текущего предмета меньше или равен текущему весу(weigth <= w), то предмет можно положить в рюкзак.Мы сравниваем, что выгоднее : положить текущий предмет в рюкзак или оставить рюкзак без него.
            dp[w][j] = std::max(dp[w][j - 1], dp[w - weigth][j - 1] + price), где price - стоимость текущего предмета.
            Иначе(если вес текущего предмета больше доступного веса рюкзака), то рюкзак остается без изменений.
            dp[w][j] = dp[w][j - 1].*/
        {
            int weigth = stuff[j - 1].second;
            if (weigth <= w)
            {
                int price = stuff[j - 1].first;
                dp[w][j] = std::max(dp[w][j - 1], dp[w - weigth][j - 1] + price); // Эту формулу нужно будет объяснить - просто  выбор более выгодного случая 
            }                                                                     //либо ложим элемент и уменьшается его вес или оставляем прежний вес но не увеличивается стоимость
            else
            {
                dp[w][j] = dp[w][j - 1];
            }
        }
    }
    /*Возвращаем значение из последней ячейки dp[W][n],
        которая представляет наилучший результат - максимальную стоимость предметов, 
        которые можно положить в рюкзак при ограниченной грузоподъемности.*/
    return dp[W][n];
}



void main()
{
	std::vector<std::pair<int, int>> stuff = { {1,3},{6,4}, {4,5}, {7,8}, {6,9} }; // Здесь пары предметов (стоимость, вес)
	int w = 13; // Грузоподъемность рюкзака
	std::cout << backpack(stuff, w) << std::endl;
}